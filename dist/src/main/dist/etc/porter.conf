# include default configuration; overwrite things below
# see https://github.com/typesafehub/config for more info
include "application"

akka {
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
  }
  remote {
    enabled-transports = [ "akka.remote.netty.tcp" ]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 4554
    }
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
}

porter {
  validators: [
    { class: "porter.auth.PasswordValidator", params: {} }
    { class: "porter.auth.DigestValidator", params: {} }
    { class: "porter.auth.DerivedValidator", params: {} }
  ]

  # mutable and read-only store implementations can be specified here.
  stores: [
    # MongoStore is mutable and requires a running mongodb server
    # params contains the connection params. If an uri is supplied, it is prefered,
    # otherwise host and port are used.
    { class: "porter.app.MongoStore", params: { uri = "mongodb://localhost:27017", host = "", port = 27017, dbname = "porterdb" }, realms: [] }

    # ConfigStore allows to specify some data in this file, see `examplestore` config below
    #{ class: "porter.app.ConfigStore", params: ${porter.examplestore} }

    # PropertyFileStore allows to specify a java properties file
    #{ class: "porter.app.PropertyFileStore", params: { file: "/some/file.properties" } }
  ]

  # Specify additional PermissionFactories here, which are PartialFunction[String, Permission]
  # They will be tried before the default factories.
  # Specify a FQCN and optinal parameters, like
  #   { class: "com.package.SomePermissionFactory", params: {} }
  permissionFactories: []

  telnet {
    enabled = true
    host = localhost
    port = 2345
  }

  http {
    enabled = true
    host = localhost
    port = 6789
    decider = "porter.auth.OneSuccessfulVote"
  }

  openid {
    # binding info
    host = "0.0.0.0"
    port = 8888
    enabled = true

    # a porter.auth.Decider impl that decides if a given AuthResult
    # represents a successful authentication
    decider = porter.auth.OneSuccessfulVote

    # where to look for static resources (like javascript or css files)
    static-resource-dir = static

    # where to look for html mustache templates before using the provided
    # ones.
    template-dir = ${porter.openid.static-resource-dir}

    # the name used for the cookie that stores the "remember-me" token
    cookie-name = PORTER

    # base64 symmetric key for cookie encryption (16 or 32byte, depending
    # on your jce capabilities)
    # by default a random one is generated
    #cookie-key =

    # whether to set the "secure" flag of the cookie
    cookie-secure = true

    # the encryption scheme used for creating passwords. possible values are
    # the supported schemes with or without additional configuration.
    # See `Password` object for more details
    # Examples:
    #  bcrypt        = bcrypt with standard configuration (strength between 10-15)
    #  bcrypt:12     = bcrypt with strength 12
    #  scrypt        = scrypt with standard configuration
    #  scrypt:65536  = scrypt with n=65536
    #  scrypt:65536:18 = scrypt with n=65536 and r=18
    #  pbkdf2-sha1   = PBKDF2 with HmacSha1 and default rounds
    #  pbkdf2-sha1:60000 = PBKDF2 with HmacSha1 with 60000 rounds
    #  digest:SHA-512 = sha512 digest with standard configuration (500000 rounds)
    #  digest:MD5:800000 = md5 digest with 800000 rounds
    #                 = one of the standard encryption schemes is chosen
    password-crypt = ""

    # list of realms the openid extensions should be
    # restricted to. If empty, all realms are considered
    realms = []

    # a default realm to use, if none is specified with the url.
    default-realm = default

    # the url to this service. If not defined, the http://bind:port url
    # will be used, so it should be changed to do something useful
    #endpoint-base-url = "https://myopenid.domain.com/some/path/without/slash"

    # specifies, whether registering new users should be enabled
    registration-enabled = false

    # require users to supply an email with registration
    registration-requires-email = true

    # if a registration key is specified, it must be given by a user that
    # is registering in order for the registration to complete. if not defined,
    # the registration is public
    #registration-invitation-key =

    #if set, the directory is used to store avatar resized images for faster
    #access.
    #avatar-cache-dir=

    #used as the maximum size allowed to be used for all avatar images
    #the image files are deleted by lowest last-modification date. if not set
    #it defaults to 20
    avatar-cache-dir-size = 20

    #the maximum size (in KB) of images allowed to upload
    #note that for each porter request (autc, authz) the account is loaded
    #into memory with all properties included
    avatar-max-upload-size=80
  }

  # example data for ConfigStore
  #examplestore {
  #  realm1: {
  #    name: "my great realm"
  #    groups: {
  #      admin: {
  #        rules: [ "bla.bla", "!bla.bla.blop" ]
  #        props: {
  #          key: "value"
  #        }
  #      }
  #    }
  #    accounts: {
  #      john: {
  #        secret: "bcryptstring"
  #        groups: [ "admin", "user" ]
  #        props: {
  #          key: "value"
  #        }
  #      }
  #    }
  #  }
  #}
}